stages:
  - migrate-dev
  - build
  - publish
  - migrate-int
  - deploy-int
  - system-tests
  - deploy-gate
  - migrate-prd
  - deploy-prd

#---shared requirements of git lab ci jobs and stages---

#base compoenets of postgres migration jobs
.migrate:
  image: kevinrambaud/node-flyway:10-5.2.4-alpine
  script:
    - cp -r $CI_PROJECT_DIR/sql/* /flyway/sql/
    - sh /flyway/flyway -url=jdbc:postgresql://$POSTGRES_SERVER:5432/$POSTGRES_DB -schemas=public -user=$POSTGRES_USER -password=$POSTGRES_PASSWORD -placeholders.ENVIRONMENT=$CI_ENVIRONMENT_NAME migrate

# base components of jobs that use node
.node:
  before_script:
    - export VERSION=${CI_COMMIT_SHA:0:7}
    - echo "@cimpress-technology:registry=https://artifactory.cimpress.io/artifactory/api/npm/npm-release-local/" > ~/.npmrc
    - echo "//artifactory.cimpress.io/artifactory/api/npm/npm-release-local/:_authToken=${CT_ARTIFACTORY_NPM_TOKEN}" >> ~/.npmrc
    - npm i -g grunt
    - npm ci

# Base components of jobs that use java
.java:
  before_script:
    - mkdir -p ~/.m2
    - echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?><settings xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\" xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><servers><server><username>${CT_ARTIFACTORY_USERNAME}</username><password>${CT_ARTIFACTORY_PASSWORD}</password><id>libs-release-local</id></server></servers></settings>" > ~/.m2/settings.xml

#Base components for setting up a deploy configuration.
.deploy:
  image: briangweber/docker-node:10
  extends: .node
  script:
    - grunt deploy --environment=$CI_ENVIRONMENT_NAME --packageVersion=$VERSION --packageName=$CI_PROJECT_NAME

# Default before script
before_script:
  - export VERSION=${CI_COMMIT_SHA:0:7}

#---Build and testing jobs---#

# If project is a a java application, it must be built with maven
maven-build:
  extends: .java
  image: maven:3.5.0-jdk-8-alpine
  stage: build
  only:
    variables:
      - $PLATFORM == "java"
  script:
    - 'mvn clean versions:set -DnewVersion=$PACKAGE_VERSION'
    - 'mvn $MAVEN_CLI_OPTS package'
  except:  
    refs:
      - schedules
  artifacts:
    paths: [target]

# If project is not a node app it will use this job configuration for build and testing
testNodeApplication:
  extends: .node
  image: node:12:13
  stage: build
  only:
    variables:
      - $NODEPOSTGRESAPP == null
  except:  
    refs:
      - schedules
    variables:
      - $PLATFORM == "java"
  script:
    - $TYPESCRIPT == "true" && npm run build
    - npm test
  coverage: '/All files\s*\|\s*[.?\d]+\s*\|\s*([0-9.]+)/'
  artifacts:
    paths:
      - coverage/
      - dist/

# if project is a node application using a postgres db this will be the build and test job
testNodeApplicationUsingPostgres:
  extends: .node
  image: kevinrambaud/node-flyway:10-5.2.4-alpine
  stage: build  
  except:  
    refs:
      - schedules
  only:
    variables:
      - $NODEPOSTGRESAPP == "true"
  script:
    - cp -r $CI_PROJECT_DIR/sql/* /flyway/sql/
    - sh /flyway/flyway -url=jdbc:postgresql://$POSTGRES_SERVER:5432/$POSTGRES_DB -schemas=public -user=$POSTGRES_USER -password=$POSTGRES_PASSWORD -placeholders.ENVIRONMENT=dev migrate
    - $TYPESCRIPT == "true" && npm run build
    - npm test
  coverage: '/All files\s*\|\s*[.?\d]+\s*\|\s*([0-9.]+)/'
  artifacts:
    paths:
      - coverage/
      - dist/
  services:
    - $POSTGRES_VERSION
  variables:
    POSTGRES_DB: postgres
    POSTGRES_USER: postgres
    POSTGRES_SERVER: postgres
    POSTGRES_PASSWORD: ''

analyze:
  image: briangweber/docker-node:10
  extends: .node
  stage: build
  allow_failure: true
  script:
    - npm config set @cimpress-technology:registry=https://artifactory.cimpress.io/artifactory/api/npm/npm-release-local/
    - npm i @cimpress-technology/s3sync -g
    - npm i plato -g
    - s3sync -b ${BUILD_ARTIFACT_BUCKET} -l plato -p ${CI_PROJECT_NAME}/plato -a download
    - plato -e .eslintrc.json  -r -d plato src
    - s3sync -b ${BUILD_ARTIFACT_BUCKET} -l plato -p ${CI_PROJECT_NAME}/plato -a upload
  only:
    refs:
      - master
    variables:
      - $BUILD_ARTIFACT_BUCKET

# for node applications will scan your dependencies for issues at build time.
dependency_scanning:
  extends: .node
  image: briangweber/docker-node:10
  stage: build
  only:
    variables:
      - $PLATFORM == "node"
  allow_failure: true
  variables:
    # NOTE: Breaking change introduced in v11.11 of the runner, using this
    # feature flag makes newest versions behave like versions prior v11.11
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/4306#note_177127898
    # Orders' runner use v12.3.0 whereas FI' runner use v11.0.0
    FF_USE_LEGACY_VOLUMES_MOUNTING_ORDER: "true"
  services:
    - docker:18.09.7-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
  artifacts:
    paths: [gl-dependency-scanning-report.json]

#---Publish Jobs---

# job used for publishing the service
publish:
  extends: .node
  image: briangweber/docker-node:10
  stage: publish
  script:
    - grunt bundle --packageVersion=$VERSION --packageName=$CI_PROJECT_NAME
  only:
    - master
  except:  
    refs:
      - schedules

#---Migration and Deploy Jobs---

# Sets up dev database for local testing
migrate-postgres-dev:
  extends: .migrate
  stage: migrate-dev
  only:
    variables:
      - $DEV_POSTGRES_SERVER
  except:  
    refs:
      - schedules
  environment:
    name: dev
  variables:
    POSTGRES_SERVER: $DEV_POSTGRES_SERVER
    POSTGRES_USER: $DEV_POSTGRES_USER
    POSTGRES_DB: $DEV_POSTGRES_DB
    # Password should be set in your gitlab ci/cd settings
    POSTGRES_PASSWORD: $DEV_DB_PASSWORD

# In database applicaitons/services preforms the migrations job required before deployment in int
# triggers automatically after publish.
migrate-postgres-int:
  extends: .migrate
  stage: migrate-int
  only:
    refs:
      - master
    variables:
      - $INT_POSTGRES_SERVER
  except:  
    refs:
      - schedules
  environment:
    name: int
  variables:
    POSTGRES_SERVER: $INT_POSTGRES_SERVER
    POSTGRES_USER: $INT_POSTGRES_USER
    POSTGRES_DB: $INT_POSTGRES_DB
    # Password should be set in your gitlab ci/cd settings
    POSTGRES_PASSWORD: $INT_DB_PASSWORD

# Deploys service to int autmatically after migrate-int stage completes sucessfully
deploy-int:
  extends: .deploy
  stage: deploy-int  
  except:  
    refs:
      - schedules
  only:
    refs:
      - master
  environment:
    name: int

# Provides a manual gate to initiate a production deployment
deploy-prd-gate:
  stage: deploy-gate
  when: manual
  environment:
    name: prd
  allow_failure: false
  script:
    - echo "beginning deployment"    
  except:  
    refs:
      - schedules
  only:
    refs:
      - master

# Job for deployment of node postgres service to production by first migrating the database
migrate-postgres-prd:
  extends: .migrate
  stage: migrate-prd
  only:
    refs:
      - master
    variables:
      - $PRD_POSTGRES_SERVER
  except:  
    refs:
      - schedules
  environment:
    name: prd
  variables:
    POSTGRES_SERVER: $PRD_POSTGRES_SERVER
    POSTGRES_USER: $PRD_POSTGRES_USER
    POSTGRES_DB: $PRD_POSTGRES_DB
    # Password should be set in your gitlab ci/cd settings
    POSTGRES_PASSWORD: $PRD_DB_PASSWORD

# Job for the deployment of node service to production
deploy-prd:
  extends: .deploy
  stage: deploy-prd
  only:
    refs:
      - master
  except:  
    refs:
      - schedules
  environment:
    name: prd
  when: on_success
