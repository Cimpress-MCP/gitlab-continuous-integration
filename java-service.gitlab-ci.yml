variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd`are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_REF_NAME"'
cache:
  paths:
    - .m2/repository
    - node_modules/
    - target/*.jar

stages:
  - build
  - bundle
  - validate
  - integration
  - deploy

before_script:
  - export PACKAGE_VERSION=${CI_COMMIT_SHA:0:7}

maven_build:
  image: maven:3.5.0-jdk-8-alpine
  stage: build
  script:
    - 'mvn clean versions:set -DnewVersion=$PACKAGE_VERSION'
    - 'mvn $MAVEN_CLI_OPTS package'
  except:
    - schedules

dependency_check:
  image: maven:3.5.0-jdk-8-alpine
  stage: build
  variables:
    REPORT_DIR: "dependency-check-reports"
    DATA_DIR: "dependency-check/data"
  artifacts:
    when: always
    paths:
    - ${REPORT_DIR}/${CI_PROJECT_NAME}-report.html
    - ${REPORT_DIR}/${CI_PROJECT_NAME}-log.log
    expire_in: 1 week
  cache:
    paths:
      - ${DATA_DIR}/*.db
  script:
    - 'curl https://s3-eu-west-1.amazonaws.com/cimpress-commerce-dependency-check/run-dependency-check.sh | bash -s "$CI_PROJECT_NAME" "$REPORT_DIR"'
  only:
    - schedules

push_bundle:
  image: briangweber/docker-node:carbon
  stage: bundle
  only:
    - develop
  except:
    - schedules
  script:
    - echo "@cimpress-technology:registry = https://artifactory.cimpress.io/artifactory/api/npm/npm-release-local/" >> ~/.npmrc
    - echo "//artifactory.cimpress.io/artifactory/api/npm/npm-release-local/:_authToken=${CT_ARTIFACTORY_NPM_TOKEN}" >> ~/.npmrc
    - npm i -g grunt
    - npm ci
    - 'grunt bundle --packageVersion=$PACKAGE_VERSION --packageName=$CI_PROJECT_NAME'

deploy_cit:
  image: briangweber/node:8
  stage: validate
  only:
    - develop
  except:
    - schedules
  environment:
    name: cit
  script:
    - echo "@cimpress-technology:registry = https://artifactory.cimpress.io/artifactory/api/npm/npm-release-local/" >> ~/.npmrc
    - echo "//artifactory.cimpress.io/artifactory/api/npm/npm-release-local/:_authToken=${CT_ARTIFACTORY_NPM_TOKEN}" >> ~/.npmrc
    - npm i -g grunt
    - npm ci
    - 'grunt deploy --environment=cit --packageVersion=$PACKAGE_VERSION --packageName=$CI_PROJECT_NAME'

deploy_int:
  image: briangweber/node:8
  stage: integration
  only:
    - develop
  except:
    - schedules
  environment:
    name: int
  script:
    - echo "@cimpress-technology:registry = https://artifactory.cimpress.io/artifactory/api/npm/npm-release-local/" >> ~/.npmrc
    - echo "//artifactory.cimpress.io/artifactory/api/npm/npm-release-local/:_authToken=${CT_ARTIFACTORY_NPM_TOKEN}" >> ~/.npmrc
    - npm i -g grunt
    - npm ci
    - 'grunt deploy --environment=int --packageVersion=$PACKAGE_VERSION --packageName=$CI_PROJECT_NAME'

deploy_prd:
  image: briangweber/node:8
  stage: deploy
  when: manual
  only:
    - develop
  except:
    - schedules
  environment:
    name: production
  script:
    - echo "@cimpress-technology:registry = https://artifactory.cimpress.io/artifactory/api/npm/npm-release-local/" >> ~/.npmrc
    - echo "//artifactory.cimpress.io/artifactory/api/npm/npm-release-local/:_authToken=${CT_ARTIFACTORY_NPM_TOKEN}" >> ~/.npmrc
    - npm i -g grunt
    - npm ci
    - 'grunt deploy --environment=prd --packageVersion=$PACKAGE_VERSION --packageName=$CI_PROJECT_NAME'
