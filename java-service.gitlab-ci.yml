include:
  - template: Dependency-Scanning.gitlab-ci.yml

variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd`are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_REF_NAME"'
cache:
  paths:
    - .m2/repository
    - node_modules/

stages:
  - build
  - bundle
  - validate
  - integration
  - deploy

before_script:
  - echo "@cimpress-technology:registry = https://artifactory.cimpress.io/artifactory/api/npm/npm-release-local/" >> ~/.npmrc
  - echo "//artifactory.cimpress.io/artifactory/api/npm/npm-release-local/:_authToken=${CT_ARTIFACTORY_NPM_TOKEN}" >> ~/.npmrc
  - mkdir -p ~/.m2
  - echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?><settings xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\" xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><servers><server><username>${CT_ARTIFACTORY_USERNAME}</username><password>${CT_ARTIFACTORY_PASSWORD}</password><id>libs-release-local</id></server></servers></settings>" > ~/.m2/settings.xml
  - export PACKAGE_VERSION=${CI_COMMIT_SHA:0:7}

maven_build:
  image: maven:3.6-jdk-8-alpine
  stage: build
  script:
    - 'mvn clean versions:set -DnewVersion=$PACKAGE_VERSION'
    - 'mvn $MAVEN_CLI_OPTS package'
  except:
    - schedules
  artifacts:
    paths: [target]

dependency_scanning:
  stage: build
  variables:
    DS_JAVA_VERSION: 8

push_bundle:
  image: cimpressorders/docker-node:12
  stage: bundle
  only:
    - master
  except:
    - schedules
  dependencies: [maven_build]
  script:
    - npm i -g grunt@1.1.0
    - npm ci
    - 'grunt bundle --packageVersion=$PACKAGE_VERSION --packageName=$CI_PROJECT_NAME'

.deploy_template: &deploy_definiton
  image: cimpressorders/docker-node:12
  only:
    - master
  except:
    - schedules
  script:
    - npm i -g grunt@1.1.0
    - npm ci
    - 'grunt deploy --environment=$CI_ENVIRONMENT_NAME --packageVersion=$PACKAGE_VERSION --packageName=$CI_PROJECT_NAME'

deploy_int:
  <<: *deploy_definiton
  stage: integration
  environment:
    name: int

deploy_prd:
  <<: *deploy_definiton
  stage: deploy
  when: manual
  environment:
    name: prd
